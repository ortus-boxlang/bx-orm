/**
 * [BoxLang]
 *
 * Copyright [2023] [Ortus Solutions, Corp]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class {

	property name="moduleRecord";
	property name="boxRuntime";
	property name="log";

	/**
	 * --------------------------------------------------------------------------
	 * Module Properties
	 * --------------------------------------------------------------------------
	 * Here is where you define the properties of your module that the module service
	 * will use to register and activate your module
	 */

	/**
	 * Your module version. Try to use semantic versioning
	 * @mandatory
	 */
	this.version = "@build.version@+@build.number@";

	/**
	 * The BoxLang mapping for your module.  All BoxLang modules are registered with an internal
	 * mapping prefix of : bxModules.{this.mapping}, /bxmodules/{this.mapping}. Ex: bxModules.test, /bxmodules/test
	 */
	this.mapping = "bxorm";

	/**
	 * Who built the module
	 */
	this.author = "Michael Born";

	/**
	 * The module description
	 */
	this.description = "Implements Hibernate ORM support for BoxLang";

	/**
	 * The module web URL
	 */
	this.webURL = "https://www.ortussolutions.com";

	/**
	 * This boolean flag tells the module service to skip the module registration/activation process.
	 */
	this.enabled = true;

	/**
	 * --------------------------------------------------------------------------
	 * Module Methods
	 * --------------------------------------------------------------------------
	 */

	/**
	 * Called by the ModuleService on module registration
	 */
	function configure(){
		/**
		 * Every module has a settings configuration object
		 */
		settings = {
		};

		/**
		 * Every module can have a list of object mappings
		 * that can be created by boxLang.  This is a great way
		 * to create objects that can be used by the module
		 * or other modules.
		 * The mappings will be created in the following format:
		 * bxModules.{this.mapping}.{mappingName}
		 * Ex: bxModules.test.MyObject => bxModules.test.models.MyObject
		 */
		objectMappings = {};

		/**
		 * DataSources can be defined by a module and they will be registered
		 * for you in the runtime
		 */
		datasources = {};

		/**
		 * The module interceptors to register into the runtime
		 */
		interceptors = [];

		/**
		 * A list of custom interception points to register into the runtime
		 */
		customInterceptionPoints = [];
	}

	/**
	 * Called by the ModuleService on module activation
	 */
	function onLoad(){
		createObject( "java", "java.lang.System" ).setProperty( "javax.xml.bind.JAXBContextFactory", "com.sun.xml.bind.v2.ContextFactory" );

		// Register the orm Mapping for Class Services
		boxRuntime.getConfiguration().registerMapping( "orm", variables.moduleRecord.path & "/models" );
	}

	/**
	 * Called by the ModuleService on module deactivation
	 */
	function onUnload(){}

	/**
	 * --------------------------------------------------------------------------
	 * Module Events
	 * --------------------------------------------------------------------------
	 * You can listen to any Runtime events by creating the methods
	 * that match the approved Runtime Interception Points
	 */
	 function afterModuleActivations(){}
}
